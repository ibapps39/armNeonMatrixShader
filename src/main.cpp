#include "common.h"

int main()
{
    srand(time(NULL));
    const int N = 1000000;

    std::vector<vec3> A(N);
    std::vector<vec3> B(N);
    std::vector<vec3> C(N);
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::cout << "\n//////////////////////////////////////////////////\n";
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const char *command = "sysctl -n hw.ncpu";
    std::string max_t = exec(command);
    int max_threads = std::stoi(max_t);
    std::clog << "MAX THREADS per sysctl -n hw.ncpu: maxt = " << max_threads << std::endl;
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    double a_time = timeFunction(async_populate, A, 0, N - 1);
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
    double b_time = timeFunction(start_threads, N, max_threads, B);
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    read_arr(A, B, C);
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::cout << "A - linear, for loop time: " << a_time << "s" << std::endl;
    std::cout << "B - threads, time: " << b_time << "s" << std::endl;
    std::cout << std::endl;
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::cout << "Example NEON SIMD" << std::endl;
    example_SIMD();
    std::cout << std::endl;
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    std::cout << "NEON: C vs NEON" << std::endl;
    double c_time_c = timeFunction(add_float_c, C, A, B, N);
//\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    double c_time_neon1 = timeFunction(add_vec3_arrays_neon, A, B, C);
    std::cout << std::endl;
    for(int i = 0; i < 5; i++)
    {
        std::cout << "A" << i << "[" << A[i].x() << ", " << A[i].y() << ", " << A[i].z() << "]\n";
        std::cout << "B" << i << "[" << B[i].x() << ", " << B[i].y() << ", " << B[i].z() << "]\n";
        std::cout << "C" << i << "[" << C[i].x() << ", " << C[i].y() << ", " << C[i].z() << "]\n";
        std::cout << "\n";
    }
    std::cout << "add_float_c (C = A+B) - linear, for loop time: " << c_time_c << "s" << std::endl;
    std::cout << "add_float_neon1 (C = A+B) - neon, time: " << c_time_neon1 << "s" << std::endl;
    std::cout << std::endl;
    //\\/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    double thrd = timeFunction(start_neon_threads_test, A, B, C, max_threads);
    std::clog << "\nthrd === " << thrd << std::endl;
    std::cout << "\n//////////////////////////////////////////////////\n";
    return 0;
}
